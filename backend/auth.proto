syntax = "proto3";

package auth;

// AuthService provides methods for authentication, MQTT handling, and routing
service AuthService {
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc VerifyToken (TokenRequest) returns (TokenResponse);
  rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse);
  rpc PublishMqttMessage (MqttMessageRequest) returns (MqttMessageResponse); // Publish MQTT messages
  rpc SubscribeMqttTopic (MqttSubscriptionRequest) returns (MqttSubscriptionResponse); // Subscribe to MQTT topics
  rpc GetRoute (RouteRequest) returns (RouteResponse); // Fetch a route using OSRM
}

// Request and Response for user registration
message RegisterUserRequest {
  string name = 1;         // Name of the user
  string email = 2;        // Email of the user
  string password = 3;     // Password of the user
}

message RegisterUserResponse {
  string id = 1;           // ID of the newly registered user
  string message = 2;      // Success message or error details
  string error = 3;        // Error message if registration fails
}

// Request and Response for user login
message LoginRequest {
  string email = 1;        // Email of the user
  string password = 2;     // Password of the user
}

message LoginResponse {
  string token = 1;        // JWT token
  string error = 2;        // Error message if login fails
}

// Request and Response for verifying JWT tokens
message TokenRequest {
  string token = 1;        // JWT token to verify
}

message TokenResponse {
  bool success = 1;        // Whether the token is valid
  string error = 2;        // Error message if verification fails
  User user = 3;           // User information if the token is valid
}

// User object definition
message User {
  string id = 1;           // User ID
  string email = 2;        // User email
}

// Request and Response for publishing MQTT messages
message MqttMessageRequest {
  string topic = 1;        // MQTT topic to publish to
  string message = 2;      // Message payload
}

message MqttMessageResponse {
  bool success = 1;        // Whether the message was published successfully
  string error = 2;        // Error message if publication fails
}

// Request and Response for subscribing to MQTT topics
message MqttSubscriptionRequest {
  string topic = 1;        // MQTT topic to subscribe to
}

message MqttSubscriptionResponse {
  bool success = 1;        // Whether the subscription was successful
  string error = 2;        // Error message if subscription fails
  string message = 3;      // Received message payload if applicable
}

// Request and Response for fetching routes using OSRM
message RouteRequest {
  string start = 1;        // Start coordinates as "lat,lng"
  string end = 2;          // End coordinates as "lat,lng"
}

message RouteResponse {
  string geometry = 1;     // GeoJSON LineString for the route
  float distance = 2;      // Distance in meters
  float duration = 3;      // Duration in seconds
  string error = 4;        // Error message, if any
}
